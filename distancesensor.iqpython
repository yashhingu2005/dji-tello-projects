{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT12, 1.0, False)\nright_drive_smart = Motor(Ports.PORT7, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\ndistance_9 = Distance(Ports.PORT9)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nbrain_inertial.calibrate()\nwait(3, SECONDS)\ncalibrate_drivetrain()\nwait(3, SECONDS)\n\nrd = 0\nld = 0\n# Begin project code\n\n\nwhile True:\n    drivetrain.drive(FORWARD)\n    if distance_9.object_distance(MM) <= 70:\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n        \n# while True:\n#      if distance_9.object_distance(MM) <= 70:\n#          brain.screen.set_cursor(1, 1)\n#          brain.screen.print(\"detected\")\n#          drivetrain.stop()\n#          drivetrain.drive_for(REVERSE,50,MM)\n         \n#          drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n#          drivetrain.stop()\n#          rd = distance_9.object_distance(MM)\n#          drivetrain.turn_for(LEFT, 90, DEGREES)\n\n#          drivetrain.turn_for(LEFT, 90, DEGREES)\n#          wait(1,SECONDS)\n#          drivetrain.stop()\n#          ld = distance_9.object_distance(MM)\n#          drivetrain.turn_for(RIGHT, 90, DEGREES)\n#          if rd > ld:\n#              drivetrain.turn_for(RIGHT, 90, DEGREES)\n#              wait(1,SECONDS)\n#          else:\n#              drivetrain.turn_for(LEFT, 90, DEGREES)\n#              wait(1,SECONDS)\n#      else:\n#          brain.screen.set_cursor(1, 1)\n#          brain.screen.print(\"not detected\")\n#          drivetrain.drive(FORWARD)\n\n\n","textLanguage":"python","robotConfig":[{"port":[12,7,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[9],"name":"distance_9","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}